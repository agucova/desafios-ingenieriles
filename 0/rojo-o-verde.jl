### A Pluto.jl notebook ###
# v0.14.3

using Markdown
using InteractiveUtils

# This Pluto notebook uses @bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of @bind gives bound variables a default value (instead of an error).
macro bind(def, element)
    quote
        local el = $(esc(element))
        global $(esc(def)) = Core.applicable(Base.get, el) ? Base.get(el) : missing
        el
    end
end

# ‚ïî‚ïê‚ï° 6eeaa9d4-a6cb-11eb-3b50-25ca960b09a2
md"# Desaf√≠o ingenieril: ¬øRojo o verde?"

# ‚ïî‚ïê‚ï° d2c62e69-72f2-4c4b-8c4a-737eb407b50f
md"""
## Introducci√≥n
Un **algoritmo** es una secuencia de instrucciones paso-a-paso para reallizar una tarea.

![Mapa trazando la ruta de la casa de Alicia a la casa de Bob](https://i.imgur.com/R2ZbkgV.png)

Si Alicia est√° manejando a la casa de Bob, un programa de navegaci√≥n (como Google Maps) puede darle las siguientes instrucciones:

```python
Gira a la derecha hacia la avenida Siempreviva
Sigue manejando por 3 cuadras
Gira a la izquierda a la calle Baker y sigue manejando dos cuadras
Gira a la derecha y maneja por una cuadra
Llegaste!
```

¬øPero qu√© pasa si, cuando llega a la intersecci√≥n de Avenida Siempreviva y la Calle Baker, Baker est√° cerrado por una construcci√≥n? El programa necesita una forma de hacer cosas distintas basado en las condiciones observadas!

Una declaraci√≥n **if** (*if statement* en ingl√©s), tambi√©n conocida como declaraci√≥n condicional, permite que un programa haga precisamente eso. Una declaraci√≥n condicional tiene tres partes:

- Una condici√≥n a ser verificada
- Una lista de instrucciones para cuando la condici√≥n est√° satisfecha y,
- Una lista de instrucciones para cuando la condici√≥n no es satisfecha

As√≠ se ve una declaraci√≥n if:

```python
if cosa que verificar:
	haz esto cuando la condici√≥n es verdadera
else:
	haz esto cuando la condici√≥n es falsa
```

**Nota:** En ingl√©s `if` significa "si es que", mientras que `else` significa "sino".

Entonces las instrucciones de manejar para Alicia se pueden ver algo as√≠:

```python
Gira a la derecha hacia la Avenida Siempreviva
Maneja tres cuadras
if se puede girar a la izquierda:
	Gira a la izquierda y maneja dos cuadras
	Gira a la derecha y maneja una cuadra
else:
	Sigue manejando derecho por una cuadra
	Gira a la izquierda y maneja por dos cuadras
Llegaste!
```

Aqu√≠ hay un ejemplo num√©rico. Este programa calcula y anuncia la distancia entre dos puntos `x` e `y` en la linea num√©rica.

```python
dado: los n√∫meros x e y

if x > y:
	define distancia como x - y
else:
	define distancia como y - x

anunciar: distancia
```

Nota como usamos el formato `acci√≥n(descripci√≥n)` para denotar instrucciones.

Los enunciados condicionales pueden anidarse, es decir, las instrucciones dentro de un enunciado `if` pueden incluir otro enunciado `if`.

"""

# ‚ïî‚ïê‚ï° c9126d86-47fc-453c-91ab-0ed5027a9156
md"""
![Recta num√©rica](https://i.imgur.com/y0OOL7u.png)

Aqu√≠ hay un algoritmo que anuncia tres distintos colores basados en la posici√≥n de `x` basado en la linea num√©rica que se muestra arriba:
```python
dado: x, un n√∫mero:
if x < A:
    "ROJO"
else:
	if x > B:
		"VERDE"
	else:
		"NEGRO"
```

Digamos que A = 2 y B = 6. Hicimos parte del trabajo y programamos una copia del programa de arriba en este documento utilizando un lenguaje de programaci√≥n llamado Julia. Para ver c√≥mo funciona, prueba usar el deslizador de abajo para cambiar el valor de `x` y ver el resultado:
"""

# ‚ïî‚ïê‚ï° ba1c2c81-bcf3-4c0f-a306-5aa453c9ad32
begin
	x = 5
	xslider = @bind x html"<input type=range min=0 max=10>"
	md"""**Escoge un valor para `x`:**
	
	0 $(xslider) 10
	"""
end

# ‚ïî‚ïê‚ï° 23411cab-3117-42bf-a037-46e23d85c03a
md"Con x = $(x), el programa dice:"

# ‚ïî‚ïê‚ï° 247a2fcf-68cf-4475-9703-db77ef5ab734
begin	
	A = 2
	B = 6
	
	if x < A
		"ROJO"
	else
		if x > B
			"VERDE"
		else
			"NEGRO"
		end
	end
end

# ‚ïî‚ïê‚ï° 04faf528-bc1e-4a61-b27f-437c3d6f9909
md"""Tip: Si quieres ver el c√≥digo que hace funcionar el programa, selecciona la fila arriba de este texto y apreta el bot√≥n de üëÅ a la izquierda."""

# ‚ïî‚ïê‚ï° ce450f50-a6cb-11eb-1e16-bf1498b7cc2e
md"### El desaf√≠o"

# ‚ïî‚ïê‚ï° e220495e-a6cb-11eb-23d7-2723ef5d5b3b
md"""Mira el siguiente programa:
```python
if x > 6 - x^2:
	if x^2 < 3 - 2x:
		"ROJO"
	else:
		"VERDE"
else:
	"AZUL"
```

Imagina correr este programa 21 veces, con x siendo cada uno de los n√∫meros enteros desde -10 a 10. 

**¬øCu√°ntas veces el programa anunciar√° "ROJO"?**

"""

# ‚ïî‚ïê‚ï° Cell order:
# ‚ïü‚îÄ6eeaa9d4-a6cb-11eb-3b50-25ca960b09a2
# ‚ï†‚ïêd2c62e69-72f2-4c4b-8c4a-737eb407b50f
# ‚ïü‚îÄc9126d86-47fc-453c-91ab-0ed5027a9156
# ‚ïü‚îÄba1c2c81-bcf3-4c0f-a306-5aa453c9ad32
# ‚ïü‚îÄ23411cab-3117-42bf-a037-46e23d85c03a
# ‚ïü‚îÄ247a2fcf-68cf-4475-9703-db77ef5ab734
# ‚ïü‚îÄ04faf528-bc1e-4a61-b27f-437c3d6f9909
# ‚ïü‚îÄce450f50-a6cb-11eb-1e16-bf1498b7cc2e
# ‚ïü‚îÄe220495e-a6cb-11eb-23d7-2723ef5d5b3b
